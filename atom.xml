<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Dimetron's blog]]></title>
  <subtitle><![CDATA[Blog about programming and life]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://dimetron.com/"/>
  <updated>2014-11-17T23:33:04.429Z</updated>
  <id>http://dimetron.com/</id>
  
  <author>
    <name><![CDATA[Dmytro Rashko]]></name>
    <email><![CDATA[drashko@me.com]]></email>
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Moving to Hexo blog engine]]></title>
    <link href="http://dimetron.com/2014/11/17/moving-to-hexo-blog-engine/"/>
    <id>http://dimetron.com/2014/11/17/moving-to-hexo-blog-engine/</id>
    <published>2014-11-17T22:52:25.000Z</published>
    <updated>2014-11-17T23:32:59.000Z</updated>
    <content type="html"><![CDATA[<img src="http://hexo.io/css/images/logo@2x.png"><br><a href="http://hexo.io" target="_blank" rel="external">HEXO</a>: is a fast, simple &amp; powerful blog framework powered by Node.js.<br><br><strong>Installation:</strong><br>1. You need to install Node.js first.<br>2. Then use npm to install hexo command-line app<br><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo -g</div></pre></td></tr></table></figure>

<p><strong>Migration:</strong> </p>
<p>Migration process was as simple as following:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">npm install hexo-migrator-octopress</div><div class="line">hexo migrate octopress /path/to/octopress-project</div></pre></td></tr></table></figure>

<p><strong>Using Hexo:</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">hexo new <span class="string">"my-new-blog-post"</span>  <span class="comment"># will create a new post under sources/</span></div><div class="line">hexo generate  <span class="comment"># generates all content</span></div><div class="line">hexo deploy    <span class="comment"># publish generated content to target specified in the config</span></div></pre></td></tr></table></figure>

<p>Check <a href="http://hexo.io/docs/" target="_blank" rel="external">http://hexo.io/docs/</a> for more details<br>and happy blogging !!!</p>
]]></content>
    <summary type="html">
    <![CDATA[<img src="http://hexo.io/css/images/logo@2x.png"><br><a href="http://hexo.io" target="_blank" rel="external">HEXO</a>: is a fast, simple &am]]>
    </summary>
    
      <category term="nodejs" scheme="http://dimetron.com/tags/nodejs/"/>
    
      <category term="blog" scheme="http://dimetron.com/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Weekly Links Jan 31]]></title>
    <link href="http://dimetron.com/2014/01/30/weekly-links-jan-31/"/>
    <id>http://dimetron.com/2014/01/30/weekly-links-jan-31/</id>
    <published>2014-01-30T22:48:00.000Z</published>
    <updated>2014-11-08T00:33:05.000Z</updated>
    <content type="html"><![CDATA[<p>Today more video links and tutorials.</p>
<p><strong>Telco</strong></p>
<ul>
<li><a href="http://mobile.nytimes.com/blogs/dealbook/2014/01/29/google-seen-selling-it-mobility-unit-to-lenovo-for-about-3-billion/" target="_blank" rel="external">Google Is to Sell Motorola Unit</a></li>
</ul>
<p><strong>Java</strong></p>
<ul>
<li><p><a href="http://java.dzone.com/articles/visualvm-see-whats-your-heap" target="_blank" rel="external">Whats-your-heap</a></p>
</li>
<li><p><a href="http://www.youtube.com/watch?v=Oif7Udc5ImM" target="_blank" rel="external">A Quick Start to Java SE 8 Lambda</a></p>
</li>
<li><p><a href="http://www.youtube.com/watch?v=Rkd166qA6WI" target="_blank" rel="external">NightHacking Worldwide Lambdas</a></p>
</li>
<li><p><a href="http://www.youtube.com/watch?v=OIg9lNpMJew" target="_blank" rel="external">Java 8 Date and Time API with Jim Gough</a></p>
</li>
<li><p><a href="http://parleys.com/channel/5148921e0364bc17fc56b908/presentations?sort=date&amp;state=public" target="_blank" rel="external">More java videos</a></p>
</li>
</ul>
<p><strong>TDD</strong></p>
<ul>
<li><p><a href="http://blog.testdouble.com/posts/2014-01-25-the-failures-of-intro-to-tdd.html" target="_blank" rel="external">The Failures of “Intro to TDD”</a></p>
</li>
<li><p><a href="http://blog.8thlight.com/uncle-bob/2014/01/27/TheChickenOrTheRoad.html" target="_blank" rel="external">The Domain Discontinuity (answer of Uncle Bob)</a></p>
</li>
</ul>
<p><strong>NoSQL</strong></p>
<ul>
<li><a href="https://www.digitalocean.com/community/articles/how-to-install-neo4j-on-an-ubuntu-vps" target="_blank" rel="external">How To Install Neo4J on an Ubuntu VPS</a></li>
</ul>
<p><strong>Monitoring</strong></p>
<ul>
<li><a href="https://typesafe.com/blog/webinar-monitoring-your-play-apps-with-new-relic-" target="_blank" rel="external">Monitoring your Apps with New Relic</a></li>
</ul>
<p><strong>Technology trends</strong></p>
<ul>
<li><p><a href="http://www.thoughtworks.com/radar/#/" target="_blank" rel="external">ThoughtWorks - TECHNOLOGY RADAR</a></p>
</li>
<li><p><a href="http://jmap.io" target="_blank" rel="external">JSON Mail Access Protocol Specification (JMAP)</a></p>
</li>
<li><p><a href="http://www.javacodegeeks.com/2014/01/15-hot-vs-not-programming-trends.html" target="_blank" rel="external">15 hot vs not programming trends</a></p>
</li>
</ul>
<p><strong>Tools</strong></p>
<ul>
<li><p><a href="http://windirstat.info" target="_blank" rel="external">Windows Directory Statistics</a></p>
</li>
<li><p><a href="http://www.abelhadigital.com/hostsman" target="_blank" rel="external">Hosts Editor</a></p>
</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>Today more video links and tutorials.</p>
<p><strong>Telco</strong></p>
<ul>
<li><a href="http://mobile.nytimes.com/blogs/dealbook/2014/0]]>
    </summary>
    
      <category term="links" scheme="http://dimetron.com/tags/links/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[gitBlit - Managing Git Repos]]></title>
    <link href="http://dimetron.com/2013/10/28/gitblit-managing-git-repos/"/>
    <id>http://dimetron.com/2013/10/28/gitblit-managing-git-repos/</id>
    <published>2013-10-27T23:14:00.000Z</published>
    <updated>2014-11-08T00:33:05.000Z</updated>
    <content type="html"><![CDATA[<p><a href="http://gitblit.com" target="_blank" rel="external">GitBlit</a>. - is a simple and complete solution for GIT repository hosting.</p>
<ul>
<li>it is an open-source, pure Java stack for managing, viewing, and serving Git repositories,<br>designed primarily as a tool for small workgroups who want to host centralized repositories.</li>
</ul>
<img src="http://dimetron.com/images/gitblit.png">]]></content>
    <summary type="html">
    <![CDATA[<p><a href="http://gitblit.com" target="_blank" rel="external">GitBlit</a>. - is a simple and complete solution for GIT repository hosting.<]]>
    </summary>
    
      <category term="vcs" scheme="http://dimetron.com/tags/vcs/"/>
    
      <category term="git" scheme="http://dimetron.com/tags/git/"/>
    
      <category term="development" scheme="http://dimetron.com/tags/development/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Using vagrant and virtualbox for local development]]></title>
    <link href="http://dimetron.com/2013/10/27/using-vagrant-and-virtualbox-for-local-development/"/>
    <id>http://dimetron.com/2013/10/27/using-vagrant-and-virtualbox-for-local-development/</id>
    <published>2013-10-27T22:46:00.000Z</published>
    <updated>2014-11-08T00:33:05.000Z</updated>
    <content type="html"><![CDATA[<p>Vagrant and VirtualBox is a good combinaton not only for open source but also for the enterprise projects.</p>
<p>Typical scenario could be developer environment with Oracle and Weblogic running on local machine in virtual box.</p>
<p>Once confugured using Vagrant, box settings could be stored also in version control like svn or git. </p>
<img src="http://dimetron.com/images/vagrant.png">

<p>Box will be downloaded and automatically confugured once you type vagrant up or use Ant script directly from Eclipse.</p>
<img src="http://dimetron.com/images/ant_vagrant.png">

<p>On Windows SSH access can be also managed from Ant task start_ssh, which will start putty.</p>
<img src="http://dimetron.com/images/linux_htop.png">

<p>And finally such approach make testing very simple. No mocking and complex configuration required. Every developer is using the same local setup with test database.</p>
<img src="http://dimetron.com/images/junit.png">

]]></content>
    <summary type="html">
    <![CDATA[<p>Vagrant and VirtualBox is a good combinaton not only for open source but also for the enterprise projects.</p>
<p>Typical scenario could ]]>
    </summary>
    
      <category term="crm" scheme="http://dimetron.com/tags/crm/"/>
    
      <category term="virtualization" scheme="http://dimetron.com/tags/virtualization/"/>
    
      <category term="development" scheme="http://dimetron.com/tags/development/"/>
    
      <category term="linux" scheme="http://dimetron.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[JEEConf - How I missed it :(]]></title>
    <link href="http://dimetron.com/2013/06/02/jeeconf-how-i-missed-it/"/>
    <id>http://dimetron.com/2013/06/02/jeeconf-how-i-missed-it/</id>
    <published>2013-06-02T15:21:00.000Z</published>
    <updated>2014-11-08T00:33:05.000Z</updated>
    <content type="html"><![CDATA[<p>JEE Conf it’s an IT Conference in Kiev entirely devoted to Java development. </p>
<p>This year I missed it totaly, because of wierd issue with my Czech visa extension andI hope next year I will have a chance to be in Kiev.</p>
<p>However, some materials are available <a href="http://jeeconf.com/materials/" target="_blank" rel="external">online</a><br>and Here are links for the slides which I personaly liked:</p>
<p>§ <a href="http://jeeconf.com/materials/google-guava/" target="_blank" rel="external">Clean code with Google Guava</a> - The Guava project contains several of Google’s core libraries that we rely on in our Java-based projects: collections, caching, primitives support, concurrency libraries, common annotations, string processing, I/O, and so forth. There will be the slides presenting most useful and interesting features of Guava (v.12) that makes stuff simpler, better and code cleaner. We will cover most of the com.google.common.base.* classes and basic use of functions in collection and Google collections and few other features that are part of Guava and I find them very useful. Some of you will think that there is an overlap with Apache commons – and it’s true, but Guava is built with expectation that there is a Function and a Predicate class as well as various builders which makes it really cool and simple for many use cases.</p>
<p>§ <a href="http://jeeconf.com/materials/javaee-next/" target="_blank" rel="external">JavaEE.Next(): Java EE 7, 8, and Beyond</a> - The Java EE 7 platform is soon coming your way and the horizons for Java EE 8 are emerging. This session looks into some of the key changes the community can expect. The goal of this session is to foster discussion, interest and participation around these changes. Some of the changes discussed include cloud support, retiring EJB 2 entity beans and JAX-RPC, greater alignment with CDI, the long-awaited Java EE concurrency utilities, WebSocket/HTML 5 support, a standard API for JSON processing, the next version of JAX-RS, an overhaul of JMS, batch processing in Java EE and much, much more.</p>
<p>§ <a href="http://jeeconf.com/materials/java-agents/" target="_blank" rel="external">Taming Java Agents</a>- Java agents are pluggable self contained components that run embedded in a JVM and intercept the classloading process. They were introduced in Java 5 along with the powerful java.lang.instrument package. Java agents can be loaded statically at startup or dynamically (programmatically) at runtime to attach to a running process in a fail-safe fashion.<br>Java agents were an awesome addition to the JVM as it opened a lot of opportunities for tool designers and changed Java tooling landscape quite drastically. In conjunction with Java bytecode manipulation libraries it is now possible to do amazing things to Java classes: we can experiment with programming models, redefine classes in runtime, record execution flow, etc.</p>
<p>§ <a href="http://jeeconf.com/materials/nashorn/" target="_blank" rel="external">Nashorn – the new JavaScript engine for JVM</a> -Nashorn is a new JavaScript engine written in pure Java. In this session you’ll get introduced to Nashorn and will get answers to the following questions:</p>
<ul>
<li>What does it bring to the Java world?</li>
<li>What capabilities does it provide for the server and the client sides?</li>
<li>How can you leverage Nashorn in the real-life projects?<br>You’ll also learn how can we use it today, even before Nashorn is integrated into public JDK8 builds.</li>
</ul>
<p>§ <a href="http://jeeconf.com/materials/javaee-nosql/" target="_blank" rel="external">Using NoSQL with JPA, EclipseLink and JavaEE</a><br>This session explores how NoSQL solutions like MongoDB, Cassandra, Neo4j, HBase and CouchDB can be used with JPA and Java EE. Although the primary focus is on EclipseLink NoSQL, we will also cover Hibernate OGM, EasyCassandra, Morphia, etc as well as seeing how and when NoSQL can be used natively via basic CDI injection without JPA.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>JEE Conf it’s an IT Conference in Kiev entirely devoted to Java development. </p>
<p>This year I missed it totaly, because of wierd issue]]>
    </summary>
    
      <category term="jeeconf" scheme="http://dimetron.com/tags/jeeconf/"/>
    
      <category term="java" scheme="http://dimetron.com/tags/java/"/>
    
      <category term="conferences" scheme="http://dimetron.com/tags/conferences/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Vagrant in the cloud]]></title>
    <link href="http://dimetron.com/2013/05/19/vagrant-in-the-cloud/"/>
    <id>http://dimetron.com/2013/05/19/vagrant-in-the-cloud/</id>
    <published>2013-05-18T22:45:00.000Z</published>
    <updated>2014-11-08T00:33:05.000Z</updated>
    <content type="html"><![CDATA[<p>I am a big fan of <a href="http://www.vagrantup.com" target="_blank" rel="external">Vagrant</a>. It’s a very cool way of managing your virtual machines with just simple commandline interface.</p>
<p>Recently I found that another great company <a href="http://dimetron.com/blog/2013/03/14/digital-ocean-hosting/" target="_blank" rel="external">Digitalocean</a> is actually supporting  vagrant as provider.</p>
<p>After few minutes I got a running box in the Digitalocean cloud using vagrant interface!!!</p>
<img src="http://dimetron.com/images/vagrant_digital_ocean.png">


<p><em>Links:</em></p>
<ul>
<li><p><a href="https://www.digitalocean.com/blog_posts/development-environments-made-easy-with-vagrant-and-digitalocean" target="_blank" rel="external">Digital Ocean Blog</a></p>
</li>
<li><p><a href="https://github.com/smdahlen/vagrant-digitalocean" target="_blank" rel="external">https://github.com/smdahlen/vagrant-digitalocean</a></p>
</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>I am a big fan of <a href="http://www.vagrantup.com" target="_blank" rel="external">Vagrant</a>. It’s a very cool way of managing your vi]]>
    </summary>
    
      <category term="cloud" scheme="http://dimetron.com/tags/cloud/"/>
    
      <category term="vagrant" scheme="http://dimetron.com/tags/vagrant/"/>
    
      <category term="automation" scheme="http://dimetron.com/tags/automation/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Redemption from Callback Hell]]></title>
    <link href="http://dimetron.com/2013/05/08/callback-hell/"/>
    <id>http://dimetron.com/2013/05/08/callback-hell/</id>
    <published>2013-05-08T07:48:00.000Z</published>
    <updated>2014-11-08T00:33:05.000Z</updated>
    <content type="html"><![CDATA[<p>Dealing with Acync programming is becoming an issue for many developers. </p>
<pre><code><span class="variable">Callbacks</span> are the modern goto.
</code></pre><p>Modern web frameworks like <a href="http://playframework.org/" target="_blank" rel="external">Play</a> are all about asynchronous and stateless.</p>
<p>Interesting video - <a href="http://marakana.com/s/post/1453/redemption_from_callback_hell_michael_jackson_domenic_denicola_video" target="_blank" rel="external">Redemption from Callback Hell</a></p>
<p>Using asynchronous approach require some additional understanding of new paterns like callback, promice, future.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Dealing with Acync programming is becoming an issue for many developers. </p>
<pre><code><span class="variable">Callbacks</span> are the ]]>
    </summary>
    
      <category term="callcack" scheme="http://dimetron.com/tags/callcack/"/>
    
      <category term="play" scheme="http://dimetron.com/tags/play/"/>
    
      <category term="reactivemongo" scheme="http://dimetron.com/tags/reactivemongo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Future of NoSQL]]></title>
    <link href="http://dimetron.com/2013/05/08/future-nosql/"/>
    <id>http://dimetron.com/2013/05/08/future-nosql/</id>
    <published>2013-05-08T07:32:00.000Z</published>
    <updated>2014-11-08T00:33:05.000Z</updated>
    <content type="html"><![CDATA[<p>Topic of future of noSQL is impossible without knowing and understanding it’s past.</p>
<p>  There Is No Future Without The Past</p>
<p>Article <a href="http://foundationdb.com/white-papers/future-of-nosql/" target="_blank" rel="external">Future of NoSQL</a> is very interesting reading with links to even more interesting predisctions.</p>
<pre><code>Future <span class="operator">of</span> noSQL Can be <span class="operator">an</span> issue
</code></pre><p>The problem of adoption - it needs a time    </p>
<ul>
<li><p>Developers of first generation NoSQL - have to deal with eventual consistency<br>trying to use proper domain driven design for MongoDB for example</p>
</li>
<li><p>Developers of second NoSQL who will get ACID transactions will continue to apply rational model on noSQL</p>
</li>
</ul>
<p>Interesting Article: <a href="http://mandubian.com/2013/01/13/JSON-Coast-to-Coast/" target="_blank" rel="external">JSON Coast to Coast</a></p>
<p>So, it’s better to rethink design the model from client (browser, mobile) till storage / noSQL + respect CAP<br>using Domain Specific Design.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Topic of future of noSQL is impossible without knowing and understanding it’s past.</p>
<p>  There Is No Future Without The Past</p>
<p>A]]>
    </summary>
    
      <category term="nosql" scheme="http://dimetron.com/tags/nosql/"/>
    
      <category term="callback" scheme="http://dimetron.com/tags/callback/"/>
    
      <category term="reactive" scheme="http://dimetron.com/tags/reactive/"/>
    
      <category term="programming" scheme="http://dimetron.com/tags/programming/"/>
    
      <category term="cap" scheme="http://dimetron.com/tags/cap/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Playing with Iteratees - Links for Humans]]></title>
    <link href="http://dimetron.com/2013/05/05/reactivemongo/"/>
    <id>http://dimetron.com/2013/05/05/reactivemongo/</id>
    <published>2013-05-05T18:39:00.000Z</published>
    <updated>2014-11-08T00:33:05.000Z</updated>
    <content type="html"><![CDATA[<p>When I started to play with <a href="http://reactivemongo.org" target="_blank" rel="external">Reactive Mongo</a> the first thing you learn - it is using Iteratees</p>
<p>I found it a bit difficult to start with Iteratees and posted links I found so far useful:</p>
<p><em>Links</em> </p>
<ol>
<li><p><a href="http://mandubian.com/2012/08/27/understanding-play2-iteratees-for-normal-humans/" target="_blank" rel="external">Understanding Play2 Iteratees for Normal Humans</a></p>
</li>
<li><p><a href="http://jsuereth.com/scala/2012/02/29/iteratees.html" target="_blank" rel="external">Josh Suereth - Iteratees</a></p>
</li>
<li><p><a href="http://www.playframework.com/documentation/2.0.2/Iteratees" target="_blank" rel="external">Play 2x Documentation</a></p>
</li>
<li><p><a href="http://engineering.klout.com/2013/01/iteratees-in-big-data-at-klout/" target="_blank" rel="external">Iteratees in Big Data at Klout</a></p>
</li>
<li><p><a href="http://apocalisp.wordpress.com/2010/10/17/scalaz-tutorial-enumeration-based-io-with-iteratees/" target="_blank" rel="external">Scalaz Tutorial: Enumeration-Based I/O with Iteratees</a></p>
</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>When I started to play with <a href="http://reactivemongo.org" target="_blank" rel="external">Reactive Mongo</a> the first thing you lear]]>
    </summary>
    
      <category term="scala" scheme="http://dimetron.com/tags/scala/"/>
    
      <category term="reactivemongo" scheme="http://dimetron.com/tags/reactivemongo/"/>
    
      <category term="mongodb" scheme="http://dimetron.com/tags/mongodb/"/>
    
      <category term="play" scheme="http://dimetron.com/tags/play/"/>
    
      <category term="Iteratees" scheme="http://dimetron.com/tags/Iteratees/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[SVN + Markdown = Offline WIKI]]></title>
    <link href="http://dimetron.com/2013/03/14/markdown-wiki/"/>
    <id>http://dimetron.com/2013/03/14/markdown-wiki/</id>
    <published>2013-03-13T23:40:00.000Z</published>
    <updated>2014-11-08T00:33:05.000Z</updated>
    <content type="html"><![CDATA[<p>As part of my daily job I often create some notes.</p>
<p>Most of the time I use Evernote as my main note taking tool.<br>It is synchronized with all my devices and for premium users it has also offline mode on mobile devices.<br>But want to keep it private and not mixing the things.</p>
<p><strong> Colaboration</strong></p>
<p>The problem - I have another team members and I want to share with them some notes.<br>It should be simple tool, which allows to create, share and edit notes.</p>
<p>Something like a wiki, but with complete offline mode.</p>
<p><strong> SVN + Markdown </strong></p>
<p>It’s probably silly idea, but using subversion (or git) with simple wiki-like text files is a perfect match</p>
<p>I found nice simple free Markdown editor <a href="http://www.mdcharm.com" target="_blank" rel="external">MdCharm</a> that supports basic code highlighting </p>
<p>and all repository could be simply offline and versioned in SVN.</p>
<p>Markdown was an obvious choice, because of GitHub and even this blog is using it for content generation </p>
<p><strong> What’s next </strong></p>
<p>The next step would be - to make it available online in our intranet and here are some multiple choices</p>
<p>I started to look at <a href="https://github.com/mojombo/jekyll" target="_blank" rel="external">Jekkil</a> and<br><a href="https://github.com/github/gollum" target="_blank" rel="external">Gollum</a> and similiar ruby powered solutions, but I cannot decide yet. </p>
<p>Hopefully, in few days I will make my choice.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>As part of my daily job I often create some notes.</p>
<p>Most of the time I use Evernote as my main note taking tool.<br>It is synchroni]]>
    </summary>
    
      <category term="tools" scheme="http://dimetron.com/tags/tools/"/>
    
      <category term="wiki" scheme="http://dimetron.com/tags/wiki/"/>
    
      <category term="markdown" scheme="http://dimetron.com/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Digital Ocean VPS - 20GB SSD 512M / Built for developers.]]></title>
    <link href="http://dimetron.com/2013/03/14/digital-ocean-hosting/"/>
    <id>http://dimetron.com/2013/03/14/digital-ocean-hosting/</id>
    <published>2013-03-13T23:23:00.000Z</published>
    <updated>2014-11-08T00:33:05.000Z</updated>
    <content type="html"><![CDATA[<p>Few weeks ago I came across <a href="https://www.digitalocean.com" target="_blank" rel="external">Digital Ocean</a> and I can say, </p>
<p>those guys are amazing!!!</p>
<img src="http://dimetron.com/images/digital-ocean.png">

]]></content>
    <summary type="html">
    <![CDATA[<p>Few weeks ago I came across <a href="https://www.digitalocean.com" target="_blank" rel="external">Digital Ocean</a> and I can say, </p>
<]]>
    </summary>
    
      <category term="hosting" scheme="http://dimetron.com/tags/hosting/"/>
    
      <category term="fast" scheme="http://dimetron.com/tags/fast/"/>
    
      <category term="ssd" scheme="http://dimetron.com/tags/ssd/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Macbook wakeup time / hibernate mode]]></title>
    <link href="http://dimetron.com/2012/12/30/macbook-wakeup-time/"/>
    <id>http://dimetron.com/2012/12/30/macbook-wakeup-time/</id>
    <published>2012-12-30T12:44:00.000Z</published>
    <updated>2014-11-08T00:33:05.000Z</updated>
    <content type="html"><![CDATA[<p>According to some <a href="http://www.macworld.com/article/1053471/sleepmode.html" target="_blank" rel="external">sources</a>,<br>wake up delay (5-7 sec) on Macbook Pro’s is caused by deep sleep hibernate mode.</p>
<p>When all memory is stored to SSD drive and then restored on wake.<br>This is also designed to save more battery and even if battery is discharged, allow successfully recovery</p>
<h2 id="Default_sleep_mode">Default sleep mode</h2>
<p>Sleep mode can be checked or set using the Unix program pmset. </p>
<p>To see your current settings, type in Terminal:<br>    pmset -g | grep hibernate mode. </p>
<p>You should see something like this:</p>
<pre><code>$ pmset -<span class="keyword">g</span> | <span class="keyword">grep</span> hibernatemode 
hibernatemode  <span class="number">3</span>
</code></pre><p>Here is description of hibernate modes:</p>
<ul>
<li>0 - Old style sleep mode, with RAM powered on while sleeping, safe sleep disabled, and super-fast wake.</li>
<li>1 - Hibernation mode, with RAM contents written to disk, system totally shut down while “sleeping”</li>
<li>3 - The default mode on machines introduced since about fall 2005. RAM contents  written to disk </li>
<li>5 - This is the same as mode 1, but it’s for those using secure virtual memory</li>
<li>7 - This is the same as mode 3, but it’s for those using secure virtual memory.</li>
</ul>
<h2 id="Changing_default_sleep_mode">Changing default sleep mode</h2>
<p>If you’re like me and have the battery charged most of the time (keep it plugged in 90% of the time—it’s the charge cycles that kills your battery, much more than any debatable effects of overcharging. Use the battery 10% of the time to keep the electrons flowing), you can disable Deep Sleep and get rid of the delay by typing:<br>    sudo pmset -a hibernatemode 0  </p>
<h2 id="Recover_some_drive_space">Recover some drive space</h2>
<p>Finally to make sure your old memory image is not using your SSD space - type:<br>    sudo rm /var/vm/sleepimage</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>According to some <a href="http://www.macworld.com/article/1053471/sleepmode.html" target="_blank" rel="external">sources</a>,<br>wake up]]>
    </summary>
    
      <category term="mac" scheme="http://dimetron.com/tags/mac/"/>
    
      <category term="wakeup" scheme="http://dimetron.com/tags/wakeup/"/>
    
      <category term="howto" scheme="http://dimetron.com/tags/howto/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Life with a new Mac]]></title>
    <link href="http://dimetron.com/2012/12/22/life-with-new-mac/"/>
    <id>http://dimetron.com/2012/12/22/life-with-new-mac/</id>
    <published>2012-12-22T21:35:00.000Z</published>
    <updated>2014-11-08T00:33:05.000Z</updated>
    <content type="html"><![CDATA[<p>The reason I had no activity on this blog - my work and private laptops were stollen when I was on<br>travel. It happened in a nice hotel in the middle of Vienna city centre.</p>
<p>Ohh, It is wierd experience I dont want anyone to get, but there are several important lessons I’ve learned:</p>
<ul>
<li><ul>
<li>Dont rely on the fact your laptop always with you</li>
</ul>
</li>
<li><ul>
<li>Put laptops in locked safe place if you are in the hotel</li>
</ul>
</li>
<li><ul>
<li>Make a full automatic backups. Windows and Mac both have it</li>
</ul>
</li>
<li><ul>
<li>Use encryption on hard drive internal and external</li>
</ul>
</li>
</ul>
<img src="http://dimetron.com/images/backups.png">

<p>If the incident already happened there are few important things todo.</p>
<ul>
<li><ul>
<li>report to police and get a incident report</li>
</ul>
</li>
<li><ul>
<li>contact insurance immideatelly. It can take up to 10 days until you get a resolution</li>
</ul>
</li>
<li><ul>
<li>when you buy laptops, camera or any other expencive device - register them online</li>
</ul>
</li>
</ul>
<p>The last point is because you would need to prove the fact your device was real.<br>Which means you should have either an invoice or original packaging box etc.</p>
<p>PS:<br>As as a result I got money from Insurance company, some data restored from backups.<br>Now when I am writing this post from my new 15” MacPro I think it turned to be good,<br>so most important is to keep yourself positive and find good lessons even in such case.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>The reason I had no activity on this blog - my work and private laptops were stollen when I was on<br>travel. It happened in a nice hotel]]>
    </summary>
    
      <category term="mac" scheme="http://dimetron.com/tags/mac/"/>
    
      <category term="life" scheme="http://dimetron.com/tags/life/"/>
    
      <category term="lessons" scheme="http://dimetron.com/tags/lessons/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[How to learn German]]></title>
    <link href="http://dimetron.com/2012/12/01/learning-german-duolingo/"/>
    <id>http://dimetron.com/2012/12/01/learning-german-duolingo/</id>
    <published>2012-11-30T23:48:00.000Z</published>
    <updated>2014-11-08T00:33:05.000Z</updated>
    <content type="html"><![CDATA[<p>At work my main language is English. However, it is often happens to be in some other countries,<br>where it is much better to use another languages like German, French or Spanish.</p>
<p>Every time I was starting to learn German, I was immediately stuck at the very beginning.<br>Until I found <a href="http://duolingo.com/" target="_blank" rel="external">Duolingo</a>  with it’s perfect iPhone app </p>
<p>Each lesson is crafted with a unique set of words or phrases from basic level to more intermediate<br>It allows you to spend only 10-20 minutes per day on lessons. For example on the way to work … </p>
<img src="http://dimetron.com/images/duolingo_iphone.png" width="320" height="480">

<p>Check  <a href="http://duolingo.com/#/mobile" target="_blank" rel="external">http://duolingo.com/#/mobile</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>At work my main language is English. However, it is often happens to be in some other countries,<br>where it is much better to use anothe]]>
    </summary>
    
      <category term="howto" scheme="http://dimetron.com/tags/howto/"/>
    
      <category term="learn" scheme="http://dimetron.com/tags/learn/"/>
    
      <category term="german" scheme="http://dimetron.com/tags/german/"/>
    
      <category term="languages" scheme="http://dimetron.com/tags/languages/"/>
    
      <category term="duolingo" scheme="http://dimetron.com/tags/duolingo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[iOS Innovation Secret]]></title>
    <link href="http://dimetron.com/2012/12/01/ios-innovation-secret/"/>
    <id>http://dimetron.com/2012/12/01/ios-innovation-secret/</id>
    <published>2012-11-30T23:27:00.000Z</published>
    <updated>2014-11-08T00:33:05.000Z</updated>
    <content type="html"><![CDATA[<p>What is a definition of innovation on mobile development?</p>
<img src="http://dimetron.com/images/innovation.png">

<p>Looking at data from <a href="http://insights.chitika.com/2012/ios-by-device/" target="_blank" rel="external">Chitika</a></p>
<p>Currently iOS 6 has about 61% of all iOS traffic, as seen on the graph below:</p>
<img src="http://dimetron.com/images/device_graphs.png">

<p>The bottom line - it’s much easier for developers to innovate by using new features.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>What is a definition of innovation on mobile development?</p>
<img src="http://dimetron.com/images/innovation.png">

<p>Looking at data f]]>
    </summary>
    
      <category term="ios" scheme="http://dimetron.com/tags/ios/"/>
    
      <category term="innovation" scheme="http://dimetron.com/tags/innovation/"/>
    
      <category term="apple" scheme="http://dimetron.com/tags/apple/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Infinite Streams in Scala]]></title>
    <link href="http://dimetron.com/2012/11/19/streams/"/>
    <id>http://dimetron.com/2012/11/19/streams/</id>
    <published>2012-11-19T01:50:00.000Z</published>
    <updated>2014-11-08T00:33:05.000Z</updated>
    <content type="html"><![CDATA[<p>Lazy evaluation of Streams in Scala alows a very interesting trick -<br>to define infinite Streams. It’s very efficient and which is more important both<br>calculation and initialization done on demand. </p>
<figure class="highlight scala"><figcaption><span>Natural numbers:</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Stream for infinite number generation</span></div><div class="line"><span class="keyword">def</span> from(n: BigInt): Stream[BigInt] = n #:: from(n + <span class="number">1</span>)</div><div class="line"> </div><div class="line"><span class="comment">//Natural numbers definition</span></div><div class="line"><span class="keyword">val</span> nats = from(<span class="number">0</span>)            <span class="comment">//&gt; nats  : Stream[BigInt] = Stream(0, ?)</span></div><div class="line"></div><div class="line"><span class="comment">//Lets take first 5 numbers from 0</span></div><div class="line">nats.take(<span class="number">5</span>).toList           <span class="comment">//&gt; res0: List[BigInt] = List(0, 1, 2, 3, 4)</span></div></pre></td></tr></table></figure>



<p>Here is more complex example: Calculation of prime numbers using <a href="http://en.wikipedia.org/wiki/Sieve_of_Eratosthenes" target="_blank" rel="external">Sieve of Eratosthenes</a></p>
<figure class="highlight scala"><figcaption><span>Prime numbers:</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//sieve function</span></div><div class="line"><span class="keyword">def</span> sieve(s: Stream[BigInt]): Stream[BigInt] = s.head #:: sieve(s.tail filter (_ % s.head != <span class="number">0</span>))</div><div class="line">                               <span class="comment">//&gt; sieve: (s: Stream[BigInt])Stream[BigInt]</span></div><div class="line"></div><div class="line"><span class="keyword">val</span> primes = sieve(from(<span class="number">2</span>))    <span class="comment">//&gt; primes  : Stream[BigInt] = Stream(2, ?)</span></div><div class="line"></div><div class="line">primes.take(<span class="number">7</span>).toList         <span class="comment">//&gt; res1: List[BigInt] = List(2, 3, 5, 7, 11, 13, 17)</span></div></pre></td></tr></table></figure>



]]></content>
    <summary type="html">
    <![CDATA[<p>Lazy evaluation of Streams in Scala alows a very interesting trick -<br>to define infinite Streams. It’s very efficient and which is more]]>
    </summary>
    
      <category term="Scala" scheme="http://dimetron.com/tags/Scala/"/>
    
      <category term="Stream" scheme="http://dimetron.com/tags/Stream/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Tail recursion optimization]]></title>
    <link href="http://dimetron.com/2012/11/19/tailrec/"/>
    <id>http://dimetron.com/2012/11/19/tailrec/</id>
    <published>2012-11-19T01:19:00.000Z</published>
    <updated>2014-11-08T00:33:05.000Z</updated>
    <content type="html"><![CDATA[<p>Classic Tail recursion optimization example using Factorial</p>
<figure class="highlight scala"><figcaption><span>Example 1:</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">def</span> factorial(n: BigInt): BigInt = {</div><div class="line">	<span class="keyword">if</span> (n == <span class="number">0</span>) <span class="number">1</span></div><div class="line">    <span class="keyword">else</span> n * factorial(n - <span class="number">1</span>)</div><div class="line">}</div></pre></td></tr></table></figure>



<p>But there is a little problem to calculate big numbers.</p>
<pre><code><span class="input"><span class="prompt">scala&gt;</span> factorial(<span class="number">10000</span>)</span>
java.lang.<span class="constant">StackOverflowError</span>
</code></pre><p>That happens when function call itself too many times recursively. </p>
<p>However, modern compilers could optimize such cases when recursive function call is at the end. But we need to eliminate multiplication from example above and replace it with accumulative analog like below.    </p>
<p>NOTE: @tailrec is a special Scala annotation to make sure optimization happens. If it is not possible compilation error will be thrown. </p>
<figure class="highlight scala"><figcaption><span>Example 2:</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> scala.annotation.tailrec</div><div class="line"></div><div class="line"><span class="keyword">def</span> factorial(n: BigInt) = {</div><div class="line">	</div><div class="line">	<span class="annotation">@tailrec</span></div><div class="line">	<span class="keyword">def</span> rfact(n: BigInt, acc: BigInt): BigInt = {</div><div class="line">    	<span class="keyword">if</span> (n == <span class="number">0</span>) acc</div><div class="line">       <span class="keyword">else</span> rfact(n - <span class="number">1</span>, n * acc)</div><div class="line">    }</div><div class="line">    </div><div class="line">    rfact(n, <span class="number">1</span>)</div><div class="line">}</div></pre></td></tr></table></figure>



<pre><code><span class="input"><span class="prompt">scala&gt;</span> factorial(<span class="number">10000</span>)</span>
<span class="symbol">res0:</span> <span class="constant">BigInt</span> = <span class="number">28462596809170545189064132121198688901480514017027992307941799942744113400037644437729907867577847758158840621423175288300423399401535187390524211613827161748198241998275924182892597878981242531205946599625986706560161572036032397926328736717055741975962099479720346153698119897092611277500484198845410475544642442136573303076703628825803548967461117097369578603670191071512730587281041158640561281165385325968425825995584688146430425589836649317059251717204276597407446133400054194052462303436869154059404066227828248371512038322178644627183822923899638992827221879702459387693803094627332292570555459690027875282242544348021127559019169425429028916907219097083690539873747452483372899521802363282741217040268086769210451555840567172555372015852132829034279989818449313610640381489</span>...
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<p>Classic Tail recursion optimization example using Factorial</p>
<figure class="highlight scala"><figcaption><span>Example 1:</span></figc]]>
    </summary>
    
      <category term="scala" scheme="http://dimetron.com/tags/scala/"/>
    
      <category term="tail" scheme="http://dimetron.com/tags/tail/"/>
    
      <category term="optimization" scheme="http://dimetron.com/tags/optimization/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Huffman coding - adaptive algorithm]]></title>
    <link href="http://dimetron.com/2012/10/26/huffman/"/>
    <id>http://dimetron.com/2012/10/26/huffman/</id>
    <published>2012-10-26T03:49:00.000Z</published>
    <updated>2014-11-08T00:33:05.000Z</updated>
    <content type="html"><![CDATA[<p>Today I’ve done next Lesson from Scala progfun course <a href="https://www.coursera.org/course/progfun" target="_blank" rel="external">Functional Programming Principles in Scala Course</a><br>and the task was to code compression algorithm known as <a href="http://en.wikipedia.org/wiki/Huffman_coding" target="_blank" rel="external">Huffman coding</a></p>
<p>It was not easy, because of one annoing mistake related to the combine process when building CodeTree.<br>Let’s take an example of the following text.</p>
<p>Text to encode:<br>     CodeTree</p>
<p>Ordered Leafs list will look like:<br>     List(C[1], T[1], d[1], o[1], r[1], e[3])</p>
<p>Next step is Combine all Leafs into Nodes but also not forget about weight of each element in List.<br>Combined Fork node should be placed inside the tail!!!</p>
<p>Look on the following example of finding optimal tree:<br>     List( 1,  1,  1,  1, 1, 3)<br>     List([2], 1,  1, 1, 3)    -&gt;  List(1,  1,  1, [2], 3)<br>     List([2], 1,  2, 3)       -&gt;  List(1, [2], 2,  3)<br>     List([3], 2,  3)          -&gt;  List(2, [3], 3)<br>     List([5], 3)              -&gt;  List(3, [5])<br>     List([8])</p>
<p>Result:</p>
<pre><code> <span class="function">List</span>(1,  1,  1,  1, 1, 3)
 <span class="function">List</span>(1,  1,  1, <span class="attr_selector">[2]</span>, 3) 
 <span class="function">List</span>(1, <span class="attr_selector">[2]</span>, 2,  3)     
 <span class="function">List</span>(2, <span class="attr_selector">[3]</span>, 3)         
 <span class="function">List</span>(3, <span class="attr_selector">[5]</span>)            
 <span class="function">List</span>(8)
</code></pre><p> Now all tests are working fine and we should get 20 bit for our text:</p>
<figure class="highlight scala"><figcaption><span>Test:</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">test(<span class="string">"createCodeTree.test.small "</span>) {</div><div class="line">  <span class="keyword">val</span> text = <span class="string">"CodeTree"</span></div><div class="line">  <span class="keyword">val</span> tree: CodeTree = createCodeTree(text.toList)</div><div class="line">  assertEncode(tree, text, <span class="number">20</span>)</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">def</span> assertEncode(tree: CodeTree, text: String, bitCount:Int) {</div><div class="line">  println(<span class="string">"--------------------"</span>)</div><div class="line">  println(<span class="string">"Text: "</span> + text)</div><div class="line">  println(<span class="string">"OptCodeTree: "</span> + tree)</div><div class="line"></div><div class="line">  println(<span class="string">"Simple encode:"</span>)</div><div class="line">  <span class="keyword">val</span> enc1 = encode(tree)(text.toList)</div><div class="line">  println(<span class="string">"Bits: "</span> + enc1)</div><div class="line">  assert(decode(tree, enc1) === text.toList)</div><div class="line"></div><div class="line">  println(<span class="string">"Quick encode:"</span>)</div><div class="line">  <span class="keyword">val</span> enc2 = quickEncode(tree)(text.toList)</div><div class="line">  println(<span class="string">"Bits: "</span> + enc2)</div><div class="line">  assert(decode(tree, enc2) === text.toList)</div><div class="line"></div><div class="line">  assert(enc1 === enc2)</div><div class="line">  assert(enc1.length === bitCount)</div><div class="line">}</div></pre></td></tr></table></figure>



<p>Output<br>    Chars: CodeTree<br>    OrderedTree: List(C[1], T[1], d[1], o[1], r[1], e[3])<br>    List(1, 1, 1, 1, 1, 3)<br>    List(1, 1, 1, 2, 3)<br>    List(1, 2, 2, 3)<br>    List(2, 3, 3)<br>    List(3, 5)</p>
<pre><code><span class="function">List</span>(8)
--------------------
<span class="value">Text</span><span class="value">: CodeTree
OptCodeTree: <span class="function">Fork</span>(<span class="function">Leaf</span>(e,<span class="number">3</span>),<span class="function">Fork</span>(<span class="function">Fork</span>(<span class="function">Leaf</span>(C,<span class="number">1</span>),<span class="function">Leaf</span>(T,<span class="number">1</span>),<span class="function">List</span>(C, T),<span class="number">2</span>),<span class="function">Fork</span>(<span class="function">Leaf</span>(r,<span class="number">1</span>),<span class="function">Fork</span>(<span class="function">Leaf</span>(d,<span class="number">1</span>),<span class="function">Leaf</span>(o,<span class="number">1</span>),<span class="function">List</span>(d, o),<span class="number">2</span>),<span class="function">List</span>(r, d, o),<span class="number">3</span>),<span class="function">List</span>(C, T, r, d, o),<span class="number">5</span>),<span class="function">List</span>(e, C, T, r, d, o),<span class="number">8</span>)
Simple encode:
Bits: <span class="function">List</span>(<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)
Quick encode:
Bits: <span class="function">List</span>(<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span>
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<p>Today I’ve done next Lesson from Scala progfun course <a href="https://www.coursera.org/course/progfun" target="_blank" rel="external">Fu]]>
    </summary>
    
      <category term="scala" scheme="http://dimetron.com/tags/scala/"/>
    
      <category term="huffman" scheme="http://dimetron.com/tags/huffman/"/>
    
      <category term="progfun" scheme="http://dimetron.com/tags/progfun/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Scala progfun course]]></title>
    <link href="http://dimetron.com/2012/10/12/progfun-learning-scala/"/>
    <id>http://dimetron.com/2012/10/12/progfun-learning-scala/</id>
    <published>2012-10-12T04:27:00.000Z</published>
    <updated>2014-11-08T00:33:05.000Z</updated>
    <content type="html"><![CDATA[<p>Scala progfun course <a href="https://www.coursera.org/course/progfun" target="_blank" rel="external">Functional Programming Principles in Scala Course</a> is really exciting. Assignments are neither simple nor complicated.<br>They are almost perfect, except few general issues with lot of classes in one file etc.</p>
<p>However, it’s not enough to have local tests passed.<br>Some of the tests are hidden and executed after homework submitted.<br>It’s a lot of drive and fun to find all your bugs and get max score.</p>
<p>Also small hints from assignments are pushing to learn further more -<br>this is like example with List and String:</p>
<figure class="highlight scala"><figcaption><span>Example:</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> list = List(<span class="string">"Scala"</span>, <span class="string">"Java"</span>)</div><div class="line"><span class="keyword">val</span> text = <span class="string">"Is Scala a better language?"</span></div><div class="line">list.exists(text.contains)</div></pre></td></tr></table></figure>



<p>It’s pure functional - method contains is predicate for exists. And it makes code really nice and small.<br>A lot more is just ready to go and waiting at <a href="http://www.scala-lang.org/api/current/index.html#package" target="_blank" rel="external">Scala API page</a> - happy reading ;)</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Scala progfun course <a href="https://www.coursera.org/course/progfun" target="_blank" rel="external">Functional Programming Principles i]]>
    </summary>
    
      <category term="scala" scheme="http://dimetron.com/tags/scala/"/>
    
      <category term="progfun" scheme="http://dimetron.com/tags/progfun/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Writing jUnit test in Scala]]></title>
    <link href="http://dimetron.com/2012/10/08/howto-junit-scala/"/>
    <id>http://dimetron.com/2012/10/08/howto-junit-scala/</id>
    <published>2012-10-08T12:06:00.000Z</published>
    <updated>2014-11-08T00:33:05.000Z</updated>
    <content type="html"><![CDATA[<p>In my previous post <a href="/blog/2012/10/08/setup-new-scala-project-sbt/">How to Setup New Scala Project From Scratch</a><br>I showed minimal project setup in Scala with sbt.</p>
<p>But. in fact we have to do one more thing, in order to make it work.<br>We need to create build.sbt by typing nano build.sbt and paste the following content into it</p>
<figure class="highlight scala"><figcaption><span>build.sbt</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">name := <span class="string">"example.project"</span></div><div class="line"></div><div class="line">version := <span class="string">"1.0"</span></div><div class="line"></div><div class="line">scalaVersion := <span class="string">"2.9.2"</span></div><div class="line"></div><div class="line">libraryDependencies += <span class="string">"org.scalatest"</span> %% <span class="string">"scalatest"</span> % <span class="string">"1.8"</span> % <span class="string">"test"</span></div><div class="line"></div><div class="line">libraryDependencies += <span class="string">"junit"</span> % <span class="string">"junit"</span> % <span class="string">"4.10"</span> % <span class="string">"test"</span></div></pre></td></tr></table></figure>

<p>This will enable jUnit support into your project.</p>
<p>Second part is writing test itself. It is prety easy.</p>
<figure class="highlight scala"><figcaption><span>src/test/scala/TestSuite.scala</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> org.scalatest.FunSuite</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.junit.runner.RunWith</div><div class="line"><span class="keyword">import</span> org.scalatest.junit.JUnitRunner</div><div class="line"></div><div class="line"><span class="annotation">@RunWith</span>(classOf[JUnitRunner])</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestSuite</span> <span class="keyword">extends</span> <span class="title">FunSuite</span> </span>{</div><div class="line">	test(<span class="string">"my first test"</span>) {</div><div class="line">      assert(<span class="number">1</span>+<span class="number">1</span> === <span class="number">2</span>)</div><div class="line">  }</div><div class="line">}</div></pre></td></tr></table></figure>

<p>Save file and run - sbt test</p>
<figure class="highlight bash"><figcaption><span>- sbt test</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div><div class="line">info] Loading global plugins from /Users/dmitriyr/.sbt/plugins</div><div class="line">[info] Set current project to example.project (<span class="keyword">in</span> build file:/Users/dmitriyr/.Trash/example_project/)</div><div class="line">[info] Updating {file:/Users/dmitriyr/.Trash/example_project/}default-<span class="number">5</span>dd51a...</div><div class="line">[info] Resolving org.scala-lang<span class="comment">#scala-library;2.9.2 ...</span></div><div class="line">[info] Resolving org.scalatest<span class="comment">#scalatest_2.9.2;1.8 ...</span></div><div class="line">[info] Resolving junit<span class="comment">#junit;4.10 ...</span></div><div class="line">[info] Resolving org.hamcrest<span class="comment">#hamcrest-core;1.1 ...</span></div><div class="line">[info] Done updating.</div><div class="line">[info] Compiling <span class="number">1</span> Scala <span class="built_in">source</span> to /Users/dmitriyr/.Trash/example_project/target/scala-<span class="number">2.9</span>.<span class="number">2</span>/test-classes...</div><div class="line">[info] TestSuite:</div><div class="line">[info] - my first test</div><div class="line">[info] Passed: : Total <span class="number">1</span>, Failed <span class="number">0</span>, Errors <span class="number">0</span>, Passed <span class="number">1</span>, Skipped <span class="number">0</span></div><div class="line">[success] Total time: <span class="number">3</span> s, completed Oct <span class="number">8</span>, <span class="number">2012</span> <span class="number">2</span>:<span class="number">19</span>:<span class="number">03</span> PM</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[<p>In my previous post <a href="/blog/2012/10/08/setup-new-scala-project-sbt/">How to Setup New Scala Project From Scratch</a><br>I showed m]]>
    </summary>
    
      <category term="scala" scheme="http://dimetron.com/tags/scala/"/>
    
      <category term="junit" scheme="http://dimetron.com/tags/junit/"/>
    
      <category term="tdd" scheme="http://dimetron.com/tags/tdd/"/>
    
  </entry>
  
</feed>
